generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  role                String    @default("user")
  providerAccountId   String?
  email               String    @unique
  name                String?
  nickname            String?   @default("User")
  treasure            Int       @default(0)
  createdAt           DateTime  @default(now())
  emailVerified       DateTime?
  image               String?
  updatedAt           DateTime  @updatedAt
  experience          Int       @default(0)
  battling            Boolean   @default(false)
  paused              Boolean   @default(false) // merge this with above for v2
  bossesSlain         Boss[]
  accounts            Account[]
  battles             Battle[]
  inventory           Item[]
  sessions            Session[]
  projects            Project[]
  scraps              Scrap[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Boss {
  id        Int     @id @default(autoincrement())
  name      String
  desc      String
  image     String
  maxHealth Int
  health    Int
  strength  String
  weakness  String
  battles   Battle[] // Battles that this boss has been involved in
  userId    String
  slainBy   User    @relation(fields: [userId], references: [id])
  active    Boolean  @default(false)
}

model Item {
  id            Int     @id @default(autoincrement())
  name          String
  desc          String
  image         String
  rarity        Int
  userId        String
  multiplier    Float   @default(1)
  user          User    @relation(fields: [userId], references: [id])
  userEquipped  Boolean @default(false)
}

model Battle {
  id            Int        @id @default(autoincrement())
  bossId        Int
  userId        String
  duration      Int        @default(0)
  damage        Int        @default(0) // damage done to the boss
  boss          Boss       @relation(fields: [bossId], references: [id]) // boss that this battle is associated with
  effect        String?    // was this a strength/weakness or none of the boss.
  multiplier    Float      // damage multiplier in accordance with this being a strength or weakness
  projectId     Int 
  project       Project    @relation(fields: [projectId], references: [id]) // project that this battle is associated with
  scrap         Scrap[]     // scrap submitted for this project.
  timePaused    Int        @default(0) // total seconds battle was paused for 
  timesPaused   DateTime[] @default([]) // log each time the session was paused
  timesUnpaused  DateTime[] @default([]) // log each time the session was unpaused (yeah i know this is really janky pft)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id])
}

model Project { // ideally this shouldn't really be used, but if people haven't set up time tracking...
  id        Int       @id @default(autoincrement())
  type      String    
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  battle    Battle[]  // battles that involve this project
  scrap     Scrap[]   // scraps that involve this project
}

model Scrap { // proof of submitted project
  id          Int       @id @default(autoincrement())
  url         String    
  description String
  projectId   Int       
  project     Project   @relation(fields: [projectId], references: [id]) // project that this scrap is associated with
  battleId    Int       
  battle      Battle    @relation(fields: [battleId], references: [id]) // battle that this scrap is associated with
  userId      String
  user        User      @relation(fields: [userId], references: [id]) // user that created this scrap
  status      String    @default("unreviewed") // unreviewed, rejected, approved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

}